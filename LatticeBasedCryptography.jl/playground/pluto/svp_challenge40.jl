### A Pluto.jl notebook ###
# v0.20.19

using Markdown
using InteractiveUtils

# ╔═╡ 93cc1640-85c2-424e-b97c-85dc026f9cdf
begin
	using Test
	using LinearAlgebra
	using SpecialFunctions
end

# ╔═╡ 277647fc-62e0-45d5-b12b-c24ba2808c11
begin
	struct GSOData{I<:Integer, F<:Real}
		B::Matrix{I}
		B⃗::Vector{F}
		Q::Matrix{F}
		R::Matrix{F}
	end

	function stable_qr(A::AbstractMatrix{<:Real})
	    m, n = size(A)
	    T = float(eltype(A))                 # A の実数要素型（Float64, BigFloat 等）
	
	    # 1) 列スケーリング（各列の 2-ノルム ≈ 1 に）
	    colnorms = [norm(@view A[:,j]) for j in 1:n]
	    scale = Vector{T}(undef, n)
	    @inbounds for j in 1:n
	        s = T(colnorms[j])
	        scale[j] = (s == 0) ? one(T) : s
	    end
	    Dinv = Diagonal(inv.(scale))
	    As = A * Dinv
	
	    # 2) 列ピボット付きQR（Businger–Golub）
	    F = qr(As, Val(true))                # Q, R, p
	
	    # 3) R にスケールを戻す（ピボット順に注意）
	    R = F.R * Diagonal(scale[F.p])
	
	    return (Matrix(F.Q), R, F.p)
	end
	
	function gso(B::AbstractMatrix)
		Q, R, p = stable_qr(B)
		R̃ = copy(R)
		for i in axes(R̃, 1)
			dᵢ = R̃[i, i]
			for j in i:size(R̃, 2)
				R̃[i, j] /= dᵢ
			end
		end
		Q̃ = Q * Diagonal(R)
		B⃗ = [dot((@view Q̃[:, j]), (@view Q̃[:, j])) for j in axes(Q̃, 2)]
		return GSOData(B[:, p], B⃗, Q̃, R̃)
	end
	
	function partial_size_reduce!(g::GSOData{IType, FType}, i::Int, j::Int) where {IType, FType}
		if !(i < j)
			throw(
				ArgumentError("should satisfy i < j, actual i=$(i), j=$(j)")
			)
		end
		μ_ij = g.R[i, j]
		q = round(IType, μ_ij)
		bi = @view g.B[:, i]
		bj = @view g.B[:, j]
		@. bj -= q * bi
		for l in 1:i
			g.R[l, j] -= q * g.R[l, i]
		end
		g
	end
	
	function size_reduce!(g::GSOData)
		R = g.R
		for j in 2:size(R, 2)
			for i in (j-1):-1:1
				partial_size_reduce!(g, i, j)
			end
		end
		g
	end
	function gsoupdate!(g::GSOData, k::Integer)
		k ≥ 2 || throw(ArgumentError("k should satisfy k ≥ 2, actual k=$(k)"))
		for i in axes(g.B, 1)
			# swap
			g.B[i, k-1], g.B[i, k] = g.B[i, k], g.B[i, k-1]
		end
		μ = g.R
		ν = μ[k-1, k]
		B = g.B⃗[k] + ν ^ 2 * g.B⃗[k-1]
		μ[k-1, k] = ν * g.B⃗[k - 1] / B
		g.B⃗[k] = g.B⃗[k] * g.B⃗[k-1] / B
		g.B⃗[k-1] = B
		for j = 1:(k-2)
			# swap
			μ[j, k-1], μ[j, k] =μ[j, k], μ[j, k-1]
		end
		n = size(μ, 2)
		for i = (k+1):n
			t = μ[k, i]
			μ[k, i] = μ[k-1, i] - ν * t
			μ[k-1, i] = t + μ[k-1, k] * μ[k, i]
		end
		g
	end
	function LLL_reduce!(B::AbstractMatrix, δ::Real)
		if !(0.25 < δ < 1)
			throw(ArgumentError("Input δ must satisfy 0.25 < δ < 1"))
		end
		g = gso(B)
		k = 2
		n = size(g.B, 2)
		while k ≤ n
			for j = (k-1):-1:1
				partial_size_reduce!(g, j, k)
			end
			if g.B⃗[k] ≥ (δ - g.R[k-1, k] ^ 2) * g.B⃗[k-1]
				# Lovász 条件を満たす
				k += 1
			else
				# swap basis
				gsoupdate!(g, k)
				k = max(k-1, 2)
			end
		end
		g
	end
end

# ╔═╡ c89ff954-a4d0-11f0-8a77-4592aa4ed233
B = 
[[2116403082371869720683693394276970360299642162558342355675014410771989791845340105007240644994094893408332181197956887657 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[371644562438531748585630085667746983470408244373580742281269821738816154869236300428137729771977309321210236491639933332 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[970128588937842140661210199069589679615703684562655262446230094731888177573698872897660975186881893815551083050469479861 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1617885213873858163065250499756376305837976609435400008057297118650398723827143214937143752380433141030895046085134663139 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[861650440856876922136315403300972806928844583476323346957866774048720276102084753290592827764541119558381900492846561687 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1238401879408921089844474386903737818276239209740348854610933282304058072380604156331847453869318599590680629601714021166 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[302328193892196204243023116106370462383132199983296195152211088133814423239197999286069616594274614510736145263925517783 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[443681408734567838343607093614379754005413471877157728597635239760454843085205167872415159913459109353288267514781828878 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[766924867740885236236436059448427698090379772276332984401846634621581522685296543079817924330812470098383411173196131706 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1297358997739527278188204320802855592592899794686777403497982861534586993960747704855480346961487202646587358008424555998 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1923256447555821027760823712014018288715572436486045654757604016247481734877091777864720799782922934671078042956616750575 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[138791684593421316484912136928975449358519306209923545534576080943933941788220318189376736295439954669622762228268690319 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1752053685015713567891789191640042337741805857685242642164798009587123835789029180360779591122248108173121788944806990018 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[2046303652643607551083773382245919660376167541225343779851326688493989336785866602067814167781776230842039502024961224990 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[161701314003903527294539093851830420185672588693938679547737547227941952578846685981290488906797666486385636306427956922 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[2059714413420462412604210521069862437228594984719691499291824764864200097906908418575923366701593028750494787160369423664 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[236619910841436753359639417128223769093980125208659184950079289394351446700013212860226717401403083201476790108710198995 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[521807735461695034807439230274452751978618453371762238147892673540779228084610103951896314431773738642862361617950116793 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1898466106725110481310768025369914138166711138228177956551055744552328440573249624614143156799333166991080740657486025033 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[2043257177335956951070219397858777123559357103945545237417070888207682821645422085875324039671029805011652245597869305538 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[904225163671074382768019753539274681795779625382511961264465653291127670514453520050551644296901230356912243654225654401 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[32771872907828211382289261014117057923327418144915569087238809343521061214616361304729214156019094728432041297468304493 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[185789413730166201171458176468755969088909804647627433894406398430754979813498091666025324336151794710682026172503101451 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[832962803741579150035009987801883256172874768041791705764900197393212435979706525525238578679210561346645899576161141793 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1042621519072433920283083562428469593602182919945835211322354565330887090220897472063018488024892773750305996602609483380 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[171388995082154233233012548090942599143715724202696890942088990082340274801161970138190639906868753248272491463187401695 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[2100493671200104536533474921602153259773348308608862002579228988953071977809598351863259953863461834410595513598037485038 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
[849028874593296703934398545250196283716795306401228544442045159484861904205470885973430411009159267090428932112495507852 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0]
[1046701824957941065045627030825750373570344803958334982369286898950041088016988929016615138537061510672807965422152953094 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0]
[542875223055107687983299240475304624160994620138110511564200316784444891282138558584574906974554732933893987639864801905 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0]
[1584382682441666539891259939997296576922760554674178579888435692973226441994929350838648607785926118636355860195320578386 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0]
[316503555252451563889967315570982477067169012390726271667771540315451791264064871351402596704077496942199692552980634552 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0]
[1837738370141979294787389742951594377674155679679663044021277108096701623188534975556948353238304199946688862260850711361 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0]
[739578827111769709363025786954762546314747907261948920241963639022818938531742051897853101539916787244178755946187647555 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0]
[1619290331242112257658768582175275050536918255267445777163956250682374601071625719555758108294380161274992932056486622464 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0]
[852244520379043286720418573598354118899465075623425806989984806937105488837636350325384144744195783077780523735920132437 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0]
[491483555886899765880626820064070785891162464132735054675483057099729053163156386346862511333336434543264870015359686516 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0]
[842211543902380452313476978966614900223458281660135345978369910918684855621079286840261544398613444576199814061553688778 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
[1874411128584029818874533765431554481569149176662206972692659544113727361200950942823993552649265946057735986943133343384 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
[1807564784681621941238943795385610371403525911952667414563776455384585295644151678837176854600997116364524617338835884611 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]
] |> transpose |> Matrix

# ╔═╡ 6248caae-c237-401e-91bf-ba083da0f1a1
begin
	function ⪅(a, b) # \leapprox
		return a ≤ b || a ≈ b
	end

	for j in axes(B, 2)
		@test norm(qr(B).Q[:, j]) ⪅ norm(B[:, j])
	end
end

# ╔═╡ 47912860-8b1b-48b0-b563-d94bcc2cf820
let
	Q, R, p = stable_qr(B)
	residual = norm(B[:,p] - Q*R) / norm(B)
	Q' * Q - I
end

# ╔═╡ bcd5a06f-74a9-4fb8-8346-be59d8c0da6b
let
	Q, R = qr(B)
	residual = norm(B - Q*R) / norm(B)
	Q' * Q - I
end

# ╔═╡ 3b2cae0b-a978-4cd8-b337-5de2d47e2cbd
begin
	δ = 0.75
	g = LLL_reduce!(B, δ::Real)
	g.B[:, 1]
end

# ╔═╡ 00000000-0000-0000-0000-000000000001
PLUTO_PROJECT_TOML_CONTENTS = """
[deps]
LinearAlgebra = "37e2e46d-f89d-539d-b4ee-838fcccc9c8e"
SpecialFunctions = "276daf66-3868-5448-9aa4-cd146d93841b"
Test = "8dfed614-e22c-5e08-85e1-65c5234f0b40"

[compat]
SpecialFunctions = "~2.5.1"
"""

# ╔═╡ 00000000-0000-0000-0000-000000000002
PLUTO_MANIFEST_TOML_CONTENTS = """
# This file is machine-generated - editing it directly is not advised

julia_version = "1.12.0"
manifest_format = "2.0"
project_hash = "07b6a2af5d5fb1f0a41d4802d7190ebc8c9b950f"

[[deps.Artifacts]]
uuid = "56f22d72-fd6d-98f1-02f0-08ddc0907c33"
version = "1.11.0"

[[deps.Base64]]
uuid = "2a0f44e3-6c83-55bd-87e4-b1978d98bd5f"
version = "1.11.0"

[[deps.CompilerSupportLibraries_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "e66e0078-7015-5450-92f7-15fbd957f2ae"
version = "1.3.0+1"

[[deps.Dates]]
deps = ["Printf"]
uuid = "ade2ca70-3891-5945-98fb-dc099432e06a"
version = "1.11.0"

[[deps.DocStringExtensions]]
git-tree-sha1 = "7442a5dfe1ebb773c29cc2962a8980f47221d76c"
uuid = "ffbed154-4ef7-542d-bbb7-c09d3a79fcae"
version = "0.9.5"

[[deps.InteractiveUtils]]
deps = ["Markdown"]
uuid = "b77e0a4c-d291-57a0-90e8-8db25a27a240"
version = "1.11.0"

[[deps.IrrationalConstants]]
git-tree-sha1 = "e2222959fbc6c19554dc15174c81bf7bf3aa691c"
uuid = "92d709cd-6900-40b7-9082-c6be49f344b6"
version = "0.2.4"

[[deps.JLLWrappers]]
deps = ["Artifacts", "Preferences"]
git-tree-sha1 = "0533e564aae234aff59ab625543145446d8b6ec2"
uuid = "692b3bcd-3c85-4b1f-b108-f13ce0eb3210"
version = "1.7.1"

[[deps.JuliaSyntaxHighlighting]]
deps = ["StyledStrings"]
uuid = "ac6e5ff7-fb65-4e79-a425-ec3bc9c03011"
version = "1.12.0"

[[deps.Libdl]]
uuid = "8f399da3-3557-5675-b5ff-fb832c97cbdb"
version = "1.11.0"

[[deps.LinearAlgebra]]
deps = ["Libdl", "OpenBLAS_jll", "libblastrampoline_jll"]
uuid = "37e2e46d-f89d-539d-b4ee-838fcccc9c8e"
version = "1.12.0"

[[deps.LogExpFunctions]]
deps = ["DocStringExtensions", "IrrationalConstants", "LinearAlgebra"]
git-tree-sha1 = "13ca9e2586b89836fd20cccf56e57e2b9ae7f38f"
uuid = "2ab3a3ac-af41-5b50-aa03-7779005ae688"
version = "0.3.29"

    [deps.LogExpFunctions.extensions]
    LogExpFunctionsChainRulesCoreExt = "ChainRulesCore"
    LogExpFunctionsChangesOfVariablesExt = "ChangesOfVariables"
    LogExpFunctionsInverseFunctionsExt = "InverseFunctions"

    [deps.LogExpFunctions.weakdeps]
    ChainRulesCore = "d360d2e6-b24c-11e9-a2a3-2a2ae2dbcce4"
    ChangesOfVariables = "9e997f8a-9a97-42d5-a9f1-ce6bfc15e2c0"
    InverseFunctions = "3587e190-3f89-42d0-90ee-14403ec27112"

[[deps.Logging]]
uuid = "56ddb016-857b-54e1-b83d-db4d58db5568"
version = "1.11.0"

[[deps.Markdown]]
deps = ["Base64", "JuliaSyntaxHighlighting", "StyledStrings"]
uuid = "d6f4376e-aef5-505a-96c1-9c027394607a"
version = "1.11.0"

[[deps.OpenBLAS_jll]]
deps = ["Artifacts", "CompilerSupportLibraries_jll", "Libdl"]
uuid = "4536629a-c528-5b80-bd46-f80d51c5b363"
version = "0.3.29+0"

[[deps.OpenLibm_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "05823500-19ac-5b8b-9628-191a04bc5112"
version = "0.8.7+0"

[[deps.OpenSpecFun_jll]]
deps = ["Artifacts", "CompilerSupportLibraries_jll", "JLLWrappers", "Libdl"]
git-tree-sha1 = "1346c9208249809840c91b26703912dff463d335"
uuid = "efe28fd5-8261-553b-a9e1-b2916fc3738e"
version = "0.5.6+0"

[[deps.Preferences]]
deps = ["TOML"]
git-tree-sha1 = "0f27480397253da18fe2c12a4ba4eb9eb208bf3d"
uuid = "21216c6a-2e73-6563-6e65-726566657250"
version = "1.5.0"

[[deps.Printf]]
deps = ["Unicode"]
uuid = "de0858da-6303-5e67-8744-51eddeeeb8d7"
version = "1.11.0"

[[deps.Random]]
deps = ["SHA"]
uuid = "9a3f8284-a2c9-5f02-9a11-845980a1fd5c"
version = "1.11.0"

[[deps.SHA]]
uuid = "ea8e919c-243c-51af-8825-aaa63cd721ce"
version = "0.7.0"

[[deps.Serialization]]
uuid = "9e88b42a-f829-5b0c-bbe9-9e923198166b"
version = "1.11.0"

[[deps.SpecialFunctions]]
deps = ["IrrationalConstants", "LogExpFunctions", "OpenLibm_jll", "OpenSpecFun_jll"]
git-tree-sha1 = "41852b8679f78c8d8961eeadc8f62cef861a52e3"
uuid = "276daf66-3868-5448-9aa4-cd146d93841b"
version = "2.5.1"

    [deps.SpecialFunctions.extensions]
    SpecialFunctionsChainRulesCoreExt = "ChainRulesCore"

    [deps.SpecialFunctions.weakdeps]
    ChainRulesCore = "d360d2e6-b24c-11e9-a2a3-2a2ae2dbcce4"

[[deps.StyledStrings]]
uuid = "f489334b-da3d-4c2e-b8f0-e476e12c162b"
version = "1.11.0"

[[deps.TOML]]
deps = ["Dates"]
uuid = "fa267f1f-6049-4f14-aa54-33bafae1ed76"
version = "1.0.3"

[[deps.Test]]
deps = ["InteractiveUtils", "Logging", "Random", "Serialization"]
uuid = "8dfed614-e22c-5e08-85e1-65c5234f0b40"
version = "1.11.0"

[[deps.Unicode]]
uuid = "4ec0a83e-493e-50e2-b9ac-8f72acf5a8f5"
version = "1.11.0"

[[deps.libblastrampoline_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "8e850b90-86db-534c-a0d3-1478176c7d93"
version = "5.13.1+1"
"""

# ╔═╡ Cell order:
# ╠═93cc1640-85c2-424e-b97c-85dc026f9cdf
# ╠═277647fc-62e0-45d5-b12b-c24ba2808c11
# ╠═c89ff954-a4d0-11f0-8a77-4592aa4ed233
# ╠═6248caae-c237-401e-91bf-ba083da0f1a1
# ╠═47912860-8b1b-48b0-b563-d94bcc2cf820
# ╠═bcd5a06f-74a9-4fb8-8346-be59d8c0da6b
# ╠═3b2cae0b-a978-4cd8-b337-5de2d47e2cbd
# ╟─00000000-0000-0000-0000-000000000001
# ╟─00000000-0000-0000-0000-000000000002
